name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout code
    - name: Checkout code
      uses: actions/checkout@v2

    # Cache Composer dependencies
    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ~/.composer/cache
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    # Set up PHP
    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '7.4'

    # Install dependencies and composer
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl unzip

    # Run Composer (if composer.json exists)
    - name: Install PHP dependencies
      run: |
        if [ -f "composer.json" ]; then \
          curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer && \
          composer install --no-dev --optimize-autoloader; \
        fi

    # Cache Docker layers
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/docker-cache
        key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile') }}
        restore-keys: |
          ${{ runner.os }}-docker-

    # Run tests
    - name: Run tests
      run: |
        echo "Running tests..."
        # Replace this with your actual test command
        if [ -f "vendor/bin/phpunit" ]; then vendor/bin/phpunit; fi

    # Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    # Build and push Docker image
    - name: Build and Push Docker Image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        cache-from: type=local,src=/tmp/docker-cache
        cache-to: type=local,dest=/tmp/docker-cache
        tags: ${{ secrets.DOCKER_USERNAME }}/online-clothing-store:latest

    # Optional: Upload build artifact
    - name: Upload Build Artifact
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: build-artifact
        path: dist/  # Replace with the directory containing your build files

    # Deployment (Optional)
    - name: Deploy to Production
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Deploying the application..."
        # Add your deployment commands here

